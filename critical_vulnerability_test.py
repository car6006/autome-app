#!/usr/bin/env python3
"""
CRITICAL VULNERABILITY DEMONSTRATION
Shows the authentication bypass vulnerability in /api/notes/{id} endpoints
"""

import requests
import json
import time

def test_vulnerability():
    base_url = "https://voice-capture-9.preview.emergentagent.com"
    api_url = f"{base_url}/api"
    
    print("üö® DEMONSTRATING CRITICAL AUTHENTICATION BYPASS VULNERABILITY")
    print("=" * 70)
    
    # Step 1: Create an anonymous note (no authentication)
    print("1. Creating anonymous note without authentication...")
    
    create_response = requests.post(
        f"{api_url}/notes",
        json={"title": "Anonymous Vulnerable Note", "kind": "text", "text_content": "This is sensitive data that should be protected"}
    )
    
    if create_response.status_code == 200:
        note_data = create_response.json()
        note_id = note_data.get('id')
        print(f"   ‚úÖ Anonymous note created: {note_id}")
        print(f"   Status: {note_data.get('status')}")
    else:
        print(f"   ‚ùå Failed to create anonymous note: {create_response.status_code}")
        return False
    
    # Step 2: Access the note without authentication (VULNERABILITY)
    print("\n2. Accessing note without authentication (SHOULD BE BLOCKED)...")
    
    get_response = requests.get(f"{api_url}/notes/{note_id}")
    
    if get_response.status_code == 200:
        note_content = get_response.json()
        print("   üö® CRITICAL VULNERABILITY: Unauthenticated access succeeded!")
        print(f"   Retrieved note title: {note_content.get('title')}")
        print(f"   Retrieved note content: {note_content.get('artifacts', {}).get('text', 'N/A')}")
        print(f"   Note user_id: {note_content.get('user_id', 'None (anonymous)')}")
        vulnerability_confirmed = True
    else:
        print(f"   ‚úÖ Access properly blocked with status: {get_response.status_code}")
        vulnerability_confirmed = False
    
    # Step 3: Delete the note without authentication (VULNERABILITY)
    print("\n3. Deleting note without authentication (SHOULD BE BLOCKED)...")
    
    delete_response = requests.delete(f"{api_url}/notes/{note_id}")
    
    if delete_response.status_code == 200:
        print("   üö® CRITICAL VULNERABILITY: Unauthenticated deletion succeeded!")
        print(f"   Response: {delete_response.json()}")
        vulnerability_confirmed = True
    else:
        print(f"   ‚úÖ Deletion properly blocked with status: {delete_response.status_code}")
    
    # Step 4: Test with authenticated user's note
    print("\n4. Testing with authenticated user's note...")
    
    # Register a user
    user_data = {
        "email": f"vuln_test_{int(time.time())}@example.com",
        "username": f"vulntest{int(time.time())}",
        "password": "VulnTest123!",
        "first_name": "Vuln",
        "last_name": "Test"
    }
    
    register_response = requests.post(f"{api_url}/auth/register", json=user_data)
    if register_response.status_code == 200:
        auth_data = register_response.json()
        token = auth_data.get('access_token')
        print(f"   ‚úÖ User registered and authenticated")
        
        # Create authenticated note
        headers = {'Authorization': f'Bearer {token}'}
        auth_note_response = requests.post(
            f"{api_url}/notes",
            json={"title": "Authenticated User Note", "kind": "text", "text_content": "This belongs to authenticated user"},
            headers=headers
        )
        
        if auth_note_response.status_code == 200:
            auth_note_data = auth_note_response.json()
            auth_note_id = auth_note_data.get('id')
            print(f"   ‚úÖ Authenticated note created: {auth_note_id}")
            
            # Try to access authenticated user's note without auth
            print("\n5. Trying to access authenticated user's note without auth...")
            unauth_access = requests.get(f"{api_url}/notes/{auth_note_id}")
            
            if unauth_access.status_code == 200:
                print("   üö® VULNERABILITY: Can access authenticated user's note without auth!")
                vulnerability_confirmed = True
            elif unauth_access.status_code == 403:
                print("   ‚úÖ Authenticated user's note properly protected")
            elif unauth_access.status_code == 404:
                print("   ‚úÖ Authenticated user's note returns 404 (acceptable protection)")
            else:
                print(f"   ‚ö†Ô∏è  Unexpected status: {unauth_access.status_code}")
    
    print("\n" + "=" * 70)
    print("VULNERABILITY ASSESSMENT SUMMARY")
    print("=" * 70)
    
    if vulnerability_confirmed:
        print("üö® CRITICAL AUTHENTICATION BYPASS VULNERABILITY CONFIRMED!")
        print("   - Anonymous notes can be accessed without authentication")
        print("   - Anonymous notes can be deleted without authentication")
        print("   - This exposes sensitive user data to unauthorized access")
        print("\nüîß REQUIRED FIX:")
        print("   - Change get_current_user_optional to get_current_user in:")
        print("     * /api/notes/{note_id} (GET)")
        print("     * /api/notes/{note_id} (DELETE)")
        print("   - Ensure all note operations require authentication")
        return False
    else:
        print("‚úÖ No critical authentication bypass vulnerability detected")
        return True

if __name__ == "__main__":
    success = test_vulnerability()
    exit(0 if success else 1)